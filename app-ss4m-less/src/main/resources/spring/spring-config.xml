<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- spring配置文件，主要存储业务层与持久层的Bean -->

	<!-- <bean id="propertyPlaceholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<bean id="propertyPlaceholder" class="io.flysium.framework.util.SpringPropertyUtils">
		<property name="systemPropertiesMode" value="2" /><!-- 使用JVM参数覆盖配置文件的参数 -->
		<property name="locations">
			<list>
				<value>classpath*:config/app.properties</value>
				<!-- <value>${CONFIG_PATH}/app.properties</value> -->
				<value>classpath*:config/param.properties</value>
				<!-- <value>${CONFIG_PATH}/param.properties</value> -->
				<value>classpath*:config/cache.properties</value>
				<!-- <value>${CONFIG_PATH}/cache.properties</value> -->
			</list>
		</property>
	</bean>
	
	<!-- 自动扫描类包，将标志Spring注解的类自动转化为Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="io.flysium.framework.app"></context:component-scan>
	<context:component-scan base-package="io.flysium.framework.cache"></context:component-scan>
	<context:component-scan base-package="io.flysium.framework.util"></context:component-scan>
	
	<!-- 使用cglib代理 -->
	<aop:config proxy-target-class="true"/>
	
	<!-- 单个主数据源配置 -->
	<!-- <import resource="jdbc-config.xml" /> -->
	<!-- 动态数据源配置，及支持动态容灾情况，主数据库自动切换到后备数据库 -->
	<import resource="jdbc-dynamic-config.xml" />
	
	<!-- 配置mybatis sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/sqlmap-config-${DEFAULT_DBTYPE}.xml" />
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!-- 事务管理器配置 -->
    <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<property name="targetDataSource" ref="dataSource" />
	</bean>
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSourceProxy" />
	</bean> -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceProxy" />
	</bean>
    <!-- 开启事务注解方式注入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    <!-- 事务在@Transactional注解方法中起作用 -->
    <tx:annotation-driven transaction-manager="transactionManager" order="0"/>
    
	<!-- 以下的代码都是样例，你可以阅读或者随意删除。 -->
	<!-- 自动扫描类包，将标志Spring注解的类自动转化为Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="demo"></context:component-scan>
	<!-- <bean id="demoService" class="demo.service.DemoService" ></bean> -->
	<bean id="demoService" class="demo.service.DemoService" scope="request"></bean>

</beans>